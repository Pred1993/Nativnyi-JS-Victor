//37529[0-9]{7} //375293456787
//[0-9] любая цифра, ещё можно написать как \d
//{7} - повторения 7 раз
//  [ ] \ / ^ $ . | ? * + ( ) { } - нужно экранировать
// (abc){1,} - повтори от одного до бесконечности раз группу символов в скобках
// ^[^b] - показать все символы, которые начинаются не с b
// \d - любая цифра
// \D - все что угодно, кроме цифр
// \s- позволяет найти пробелы
// \S- все кроме пробелов
// \w- буква
// \W- все кроме букв
// \b- граница слова
// \B- все кроме не границ слова
// * - от нуля и выше
// + - от 1 и выше
// ? - либо 0 либо 1

let phoneRegex = /37529\d{7}/
console.log(phoneRegex.test('375293456784'))

let emailRegex = /^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+\.[a-zA-Z0-9_]{2,}$/ // ^ начало строки, $ - конец строки, + одно и более повторение, \. - экранирование точки как символа
console.log(emailRegex.test('Metrash2@gmail.com'))

let domainWithProtocolRegex = /^(https?:\/\/)?([\w][a-zA-Z0-9-]+\.){1,}[a-zA-Z]{2,}$/ // \w -любая буква или число, {2,} - от двух и больше повторений, s?(? ноль или одно) вданном случе s может быть, а может не быть , [\w] в этом коде захаркодили, чтобы первым символом мог быть либо буква либо число, но не тире
console.log(domainWithProtocolRegex.test('http://tut.by'))
console.log(domainWithProtocolRegex.test('tut.by'))
console.log(domainWithProtocolRegex.test('https://tut.by'))

let regexp1 = /( yo )/gi // i - флаг игнорирования регистра, g - флаг поиска глобально, тоесть не остановится на поиске первого совпавшего элемента, а продолжит искать, пробелы перед yo будут искать его как отдельное слово а не часть какого-то слова
console.log(regexp1.test('I am nigga YOutube yes'))
